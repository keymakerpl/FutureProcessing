<prism:PrismApplication x:Class="FutureProcessing.App"
                        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	                    xmlns:prism="http://prismlibrary.com/"
                        xmlns:local="clr-namespace:FutureProcessing"
                        xmlns:helpers="clr-namespace:Infrastructure.Helpers;assembly=Infrastructure">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>

                <!-- MahApps.Metro resource dictionaries. Make sure that all file names are Case Sensitive! -->
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Fonts.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Colors.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/FlatSlider.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.AnimatedTabControl.xaml" />

                <!-- Accent and AppTheme setting -->
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Accents/Steel.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Accents/BaseLight.xaml" />

                <!-- Standard resource, zdefiniowane style -->
                <ResourceDictionary>

                    <Style TargetType="Label"
                           BasedOn="{StaticResource {x:Type Label}}">
                        <Setter Property="Foreground" Value="Black"/>
                    </Style>

                    <!--<Style TargetType="xctk:DateTimePicker">
                        <Setter Property="Foreground" Value="AliceBlue"/>
                    </Style>-->

                    <Style TargetType="Button"
                           BasedOn="{StaticResource {x:Type Button}}">
                        <Setter Property="FontWeight" Value="Medium"/>
                    </Style>

                    <!--<Style TargetType="Border"
                           BasedOn="{StaticResource {x:Type Border}}">
                        <Setter Property="BorderBrush" Value="#FF83919F"/>
                    </Style>-->

                    <Style TargetType="ComboBox"
                           BasedOn="{StaticResource {x:Type ComboBox}}">
                        <Setter Property="FontSize" Value="14"/>
                    </Style>

                    <!-->Konwerter booli na enum visibility w xaml</-->
                    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
                    <!--<helper:InverseBooleanToVisibilityConverter x:Key="InverseBooleanToVisibilityConverter"/>-->
                    <helpers:InverseBooleanConverter x:Key="InverseBooleanConverter"/>

                    <!-- Zadefiniowane style dla pól tekstowych</-->
                    <Style TargetType="TextBox" BasedOn="{StaticResource {x:Type TextBox}}">
                        <Setter Property="FontSize" Value="14"/>
                        <Setter Property="Validation.ErrorTemplate">
                            <Setter.Value>
                                <ControlTemplate>
                                    <StackPanel>
                                        <AdornedElementPlaceholder x:Name="Placeholder"/>
                                        <TextBlock FontSize="12" Foreground="Black" Text="{Binding ElementName=Placeholder, 
                                Path=AdornedElement.(Validation.Errors)[0].ErrorContent}"/>
                                    </StackPanel>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <Trigger Property="Validation.HasError" Value="True">
                                <Setter Property="BorderBrush" Value="Firebrick"/>
                                <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, 
                        Path=(Validation.Errors)[0].ErrorContent}"/>
                                <Setter Property="BorderThickness" Value="2"/>
                            </Trigger>
                        </Style.Triggers>
                    </Style>

                    <!-- Style dla TextBlock</-->
                    <Style x:Key="DataGridColumnStyle" TargetType="TextBlock">
                        <Style.Triggers>
                            <Trigger Property="Validation.HasError" Value="True">
                                <Setter Property="Background" Value="Firebrick"/>
                                <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, 
                                        Path=(Validation.Errors)[0].ErrorContent}"/>
                            </Trigger>
                        </Style.Triggers>
                    </Style>

                    <Style x:Key="DataGridEditingColumnStyle" TargetType="TextBox">
                        <Style.Triggers>
                            <Trigger Property="Validation.HasError" Value="True">
                                <Setter Property="BorderBrush" Value="Firebrick"/>
                                <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, 
                                        Path=(Validation.Errors)[0].ErrorContent}"/>
                            </Trigger>
                        </Style.Triggers>
                    </Style>

                </ResourceDictionary>

            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </Application.Resources>
</prism:PrismApplication>
